{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherServiceService {\n  constructor(http) {\n    this.http = http;\n  }\n  getWeather({\n    city,\n    country,\n    units\n  } = {\n    city: \"London\",\n    country: \"UK\",\n    units: \"metric\"\n  }) {\n    return this.http.get(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=48f2d5e18b0d2bc50519b58cce6409f1${units === metric ? \"&units=metric\" : \"\"}`);\n  }\n}\nWeatherServiceService.ɵfac = function WeatherServiceService_Factory(t) {\n  return new (t || WeatherServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherServiceService,\n  factory: WeatherServiceService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,qBAAqB;EAChCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,UAAU,CACR;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAK,CAAE,GAAG;IACzBF,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;GACR;IAED,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAClB,oDAAoDH,IAAI,IAAIC,OAAO,0CACjEC,KAAK,KAAKE,MAAM,GAAG,eAAe,GAAG,EACvC,EAAE,CACH;EACH;;AAfWR,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAS,SAArBT,qBAAqB;EAAAU,YAFpB;AAAM","names":["WeatherServiceService","constructor","http","getWeather","city","country","units","get","metric","factory","providedIn"],"sourceRoot":"","sources":["/Users/kevincunningham/code/fwt/advAngularMar23/review-2/src/app/weather-service.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class WeatherServiceService {\n  constructor(private http: HttpClient) {}\n\n  getWeather(\n    { city, country, units } = {\n      city: \"London\",\n      country: \"UK\",\n      units: \"metric\",\n    }\n  ) {\n    return this.http.get(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=48f2d5e18b0d2bc50519b58cce6409f1${\n        units === metric ? \"&units=metric\" : \"\"\n      }`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}